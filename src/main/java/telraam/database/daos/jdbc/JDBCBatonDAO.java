package telraam.database.daos.jdbc;

import telraam.database.daos.BatonDAO;
import telraam.database.models.Baton;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

public class JDBCBatonDAO extends JDBCAbstractDAO implements BatonDAO {
    private static final Logger logger =
            Logger.getLogger(JDBCBatonDAO.class.getName());

    JDBCBatonDAO(Connection connection) {
        super(connection);
    }

    @Override
    public List<Baton> getAll() {
        List<Baton> batons = new ArrayList<>();
        try (PreparedStatement ps = prepare("select * from baton")) {
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    batons.add(new Baton(rs));
                }
            }
        } catch (SQLException e) {
            logger.severe(
                    "Failed to retrieve batons \nReason: " + e.getMessage());
        }
        return batons;
    }

    @Override
    public Baton getById(Integer id) {
        return null;
    }

    /**
     * @param newBaton The inserted baton object
     * @return the baton with the generated id set
     */
    @Override
    public Baton insert(Baton newBaton) {
        try (PreparedStatement ps = prepareAutoGenerated("insert into baton (name) values (?)")) {
            ps.setString(1, newBaton.getName());
            ps.executeUpdate();

            // Result is wrapped in an try to auto-close it
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) {
                    int key = rs.getInt(1);
                    newBaton.setId(key);
                }
            }

        } catch (SQLException e) {
            logger.severe(
                    "Failed to insert baton \nReason: " + e.getMessage());
        }
        return newBaton;
    }

    @Override
    public void delete(Integer id) {
        // TODO
    }
}
