import org.flywaydb.gradle.task.FlywayMigrateTask

plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'org.sonarqube' version "2.7"
    id 'idea'
    id 'org.flywaydb.flyway' version "6.0.8"
}

group 'telraam'
version '1.0-SNAPSHOT'

sourceCompatibility = 11

// Set our project variables
project.ext {
    dropwizardVersion = '1.3.9'
}

repositories {
    mavenCentral()
    jcenter()
}
application {
    mainClassName = 'telraam.App'
}

task runDev {

    finalizedBy {
        run.environment("CONFIG_KEY", "DEVELOPMENT")
        run.args('server', "$rootProject.projectDir/src/main/resources/telraam/devConfig.yml")
        run
    }
}
task runProd {

    finalizedBy {
        run.environment("CONFIG_KEY", "PRODUCTION")
        run.args('server', "$rootProject.projectDir/src/main/resources/telraam/prodConfig.yml")
        run
    }
}
idea {
    module {
        inheritOutputDirs = true
    }
}

dependencies {
    implementation(
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
            'io.dropwizard:dropwizard-hibernate:' + dropwizardVersion,
            'io.dropwizard:dropwizard-auth:' + dropwizardVersion,
            'io.dropwizard:dropwizard-jdbi3:' + dropwizardVersion
    )
    testImplementation('org.junit.jupiter:junit-jupiter:5.5.2')
    implementation('com.h2database:h2:1.4.199')
    implementation('org.postgresql:postgresql:42.2.8')
    testImplementation('org.flywaydb:flyway-core:6.0.8')
    testImplementation("org.mockito:mockito-core:1.+")
    testImplementation("io.dropwizard:dropwizard-testing:" + dropwizardVersion)
}

test {
    environment("CONFIG_KEY", "TESTING")
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("$buildDir/coverage")
}
jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/database/models/**'
            ])
        })
    }

}
jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/database/models/**'
            ])
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 0.7
            }
        }
    }
}
def prodProps = new Properties()
file("$rootProject.projectDir/src/main/resources/telraam/prodConfig.yml").withInputStream {
    prodProps.load(it)
}
task migrateProductionDatabase(type: FlywayMigrateTask) {
    url = prodProps.getProperty("DB_URL")
}

def devProps = new Properties()
file("$rootProject.projectDir/src/main/resources/telraam/devConfig.yml").withInputStream {
    devProps.load(it)
}
task migrateDevelopmentDatabase(type: FlywayMigrateTask) {
    url = devProps.getProperty("DB_URL")
    user = devProps.getProperty("DB_USER")
    System.out.println("--------------------")
    System.out.println(url)
    System.out.println(user)
    password = devProps.getProperty("DB_PASSWORD")
}

def testProps = new Properties()
file("$rootProject.projectDir/src/main/resources/telraam/testConfig.yml").withInputStream {
    testProps.load(it)
}
task migrateTestingDatabase(type: FlywayMigrateTask) {
    url = testProps.getProperty("DB_URL")
    baselineOnMigrate = true
}